zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: 36874c5c4e5a4ac483a5ad5067b561c0
      name: 'Templates/Network devices'
  templates:
    - uuid: 4763e1e3547447b79f4bcb3e7bd8a428
      template: 'Juniper BGP by SNMP'
      name: 'Juniper BGP by SNMP'
      groups:
        - name: 'Templates/Network devices'
      items:
        - uuid: 4de0903b5cb44dd8ba20ffc8c2cced89
          name: 'SNMP walk BGP peers'
          type: SNMP_AGENT
          snmp_oid: 'walk[.1.3.6.1.4.1.2636.5.1.1.2]'
          key: bgp.peers.walk
          history: '0'
          value_type: TEXT
          trends: '0'
          tags:
            - tag: application
              value: bgp
      discovery_rules:
        - uuid: 2dc78a6bd4b04b70924389c0cac5898a
          name: 'BGP peer discovery'
          type: DEPENDENT
          key: bgp.peer.discovery
          delay: '0'
          item_prototypes:
            - uuid: e7f97daaec3d4befbea948016db6f974
              name: 'Peer last received error ({#BGPPEERREMOTEADDRESS})'
              type: DEPENDENT
              key: 'bgp.peer.error.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: '0'
              value_type: TEXT
              trends: '0'
              preprocessing:
                - type: SNMP_WALK_VALUE
                  parameters:
                    - '.1.3.6.1.4.1.2636.5.1.1.2.2.1.1.5.{#SNMPINDEX}'
                    - '0'
              master_item:
                key: bgp.peers.walk
              tags:
                - tag: application
                  value: bgp
            - uuid: a919688c2a06468b9dbdb331abfc27ce
              name: 'Peer last sent error ({#BGPPEERREMOTEADDRESS})'
              type: DEPENDENT
              key: 'bgp.peer.error.sent[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: '0'
              value_type: TEXT
              trends: '0'
              preprocessing:
                - type: SNMP_WALK_VALUE
                  parameters:
                    - '.1.3.6.1.4.1.2636.5.1.1.2.2.1.1.6.{#SNMPINDEX}'
                    - '0'
              master_item:
                key: bgp.peers.walk
              tags:
                - tag: application
                  value: bgp
            - uuid: 18b0bd10bff64519a323ad9a7fb895a9
              name: 'Peer prefixes accepted ({#BGPPEERREMOTEADDRESS})'
              type: DEPENDENT
              key: 'bgp.peer.prefixes.accepted[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: '0'
              preprocessing:
                - type: SNMP_WALK_VALUE
                  parameters:
                    - '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.8.{#BGPPEERINDEX}.{#BGPEERREMOTEADDRESSTYPE}.1'
                    - '0'
              master_item:
                key: bgp.peers.walk
              tags:
                - tag: application
                  value: bgp
            - uuid: 11f6a640cea7423688da42ed34b928e8
              name: 'Peer prefixes advertised ({#BGPPEERREMOTEADDRESS})'
              type: DEPENDENT
              key: 'bgp.peer.prefixes.advertised[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: '0'
              preprocessing:
                - type: SNMP_WALK_VALUE
                  parameters:
                    - '.1.3.6.1.4.1.2636.5.1.1.2.6.2.1.10.{#BGPPEERINDEX}.{#BGPEERREMOTEADDRESSTYPE}.1'
                    - '0'
              master_item:
                key: bgp.peers.walk
              tags:
                - tag: application
                  value: bgp
            - uuid: 7e0714137f8946618c7ea9d6f5b8cf84
              name: 'Peer prefixes received ({#BGPPEERREMOTEADDRESS})'
              type: DEPENDENT
              key: 'bgp.peer.prefixes.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: '0'
              preprocessing:
                - type: SNMP_WALK_VALUE
                  parameters:
                    - '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.7.{#BGPPEERINDEX}.{#BGPEERREMOTEADDRESSTYPE}.1'
                    - '0'
              master_item:
                key: bgp.peers.walk
              tags:
                - tag: application
                  value: bgp
            - uuid: 5e2d6d41bee74eceadb0da17b2e22bac
              name: 'Peer prefixes rejected ({#BGPPEERREMOTEADDRESS})'
              type: DEPENDENT
              key: 'bgp.peer.prefixes.rejected[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: '0'
              preprocessing:
                - type: SNMP_WALK_VALUE
                  parameters:
                    - '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.9.{#BGPPEERINDEX}.{#BGPEERREMOTEADDRESSTYPE}.1'
                    - '0'
              master_item:
                key: bgp.peers.walk
              tags:
                - tag: application
                  value: bgp
            - uuid: 99950f527a3f4675ae73a7481c890f47
              name: 'Peer state ({#BGPPEERREMOTEADDRESS})'
              type: DEPENDENT
              key: 'bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: '0'
              valuemap:
                name: BgpPeerState
              preprocessing:
                - type: SNMP_WALK_VALUE
                  parameters:
                    - '.1.3.6.1.4.1.2636.5.1.1.2.1.1.1.2.{#SNMPINDEX}'
                    - '0'
              master_item:
                key: bgp.peers.walk
              tags:
                - tag: application
                  value: bgp
            - uuid: ea90387037b4425ca1c49d2771ded1ee
              name: 'Peer administrative status ({#BGPPEERREMOTEADDRESS})'
              type: DEPENDENT
              key: 'bgp.peer.status[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: '0'
              valuemap:
                name: BgpPeerAdminStatus
              preprocessing:
                - type: SNMP_WALK_VALUE
                  parameters:
                    - '.1.3.6.1.4.1.2636.5.1.1.2.1.1.1.3.{#SNMPINDEX}'
                    - '0'
              master_item:
                key: bgp.peers.walk
              tags:
                - tag: application
                  value: bgp
            - uuid: 63ac05e26fd7490a96c5c89d5ba7d6cd
              name: 'Peer established time ({#BGPPEERREMOTEADDRESS})'
              type: DEPENDENT
              key: 'bgp.peer.uptime[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: '0'
              units: s
              preprocessing:
                - type: SNMP_WALK_VALUE
                  parameters:
                    - '.1.3.6.1.4.1.2636.5.1.1.2.4.1.1.1.{#SNMPINDEX}'
                    - '0'
              master_item:
                key: bgp.peers.walk
              tags:
                - tag: application
                  value: bgp
          trigger_prototypes:
            - uuid: 49efa1aea96c4db5ade2fd79b72a1603
              expression: 'last(/Juniper BGP by SNMP/bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}],#3)<>6 and last(/Juniper BGP by SNMP/bgp.peer.status[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}])=2'
              recovery_mode: NONE
              name: '{HOST.HOST} BGP peering with {#BGPPEERREMOTEADDRESS} (AS{#BGPEERREMOTEAS}) has flapped'
              priority: WARNING
              manual_close: 'YES'
            - uuid: 6d1148d2ddb344709b24208ca90fe36d
              expression: 'last(/Juniper BGP by SNMP/bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}])=6 and last(/Juniper BGP by SNMP/bgp.peer.prefixes.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}])<0.8*avg(/Juniper BGP by SNMP/bgp.peer.prefixes.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}],1d)'
              name: '{HOST.HOST} BGP peer {#BGPPEERREMOTEADDRESS} (AS{#BGPEERREMOTEAS}) has lost more than 20% of received prefixes'
              priority: WARNING
              dependencies:
                - name: '{HOST.HOST} BGP peer {#BGPPEERREMOTEADDRESS} (AS{#BGPEERREMOTEAS}) is DOWN'
                  expression: 'last(/Juniper BGP by SNMP/bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}],#3)<>6 and last(/Juniper BGP by SNMP/bgp.peer.status[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}])=2'
            - uuid: ba5f5fd36b0c4efa9bfee17770958545
              expression: 'last(/Juniper BGP by SNMP/bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}],#3)<>6 and last(/Juniper BGP by SNMP/bgp.peer.status[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}])=2'
              name: '{HOST.HOST} BGP peer {#BGPPEERREMOTEADDRESS} (AS{#BGPEERREMOTEAS}) is DOWN'
              priority: HIGH
          master_item:
            key: bgp.peers.walk
          preprocessing:
            - type: SNMP_WALK_TO_JSON
              parameters:
                - '{#BGPPEERINDEX}'
                - .1.3.6.1.4.1.2636.5.1.1.2.1.1.1.14
                - '0'
                - '{#BGPPEERREMOTEADDRESS}'
                - .1.3.6.1.4.1.2636.5.1.1.2.1.1.1.11
                - '0'
                - '{#BGPEERREMOTEAS}'
                - .1.3.6.1.4.1.2636.5.1.1.2.1.1.1.13
                - '0'
                - '{#BGPEERREMOTEADDRESSTYPE}'
                - .1.3.6.1.4.1.2636.5.1.1.2.1.1.1.10
                - '0'
            - type: JAVASCRIPT
              parameters:
                - |
                  json = JSON.parse(value);
                  
                  json.forEach(function (item, index, array) {
                      var ip = item["{#BGPPEERREMOTEADDRESS}"];
                  
                      // First, check if it's already a proper IP address
                      if (ip.match(/^\d+\.\d+\.\d+\.\d+$/) || ip.match(/^[0-9a-fA-F:]+$/)) {
                          // Already properly formatted, skip processing
                          return;
                      }
                  
                      // Handle space-separated hex format (like "CB 17 ED 14")
                      if (ip.indexOf(' ') !== -1) {
                          var parts = ip.trim().split(' ');
                  
                          if (parts.length === 4) {
                              // IPv4 from space-separated hex
                              for (var i = 0; i < parts.length; ++i) {
                                  parts[i] = parseInt(parts[i], 16);
                              }
                              ip = parts.join('.');
                          } else if (parts.length == 16) {
                              // IPv6 from space-separated hex
                              ip = parts
                                  .join('')
                                  .match(/.{1,4}/g)
                                  .map(function(word) {
                                    word = word.replace(/^0+/, '');
                                    if (word.length === 0) {
                                      word = "0";
                                    }
                                    return word;
                                  })
                                  .join(':')
                                  .toLowerCase();
                      
                              ip = '<' + ip + '>';
                              for (var i = 8; i > 1; i--) {
                                  var r1 = new RegExp("[:<>](?:0[:<>]){" + i + "}");
                                  var m = ip.match(r1);
                                  if (m) {
                                      ip = ip.replace(r1, '::');
                                      break;
                                  }
                              }
                              ip = ip.replace(/^[<]?([^>]+)[>]?$/, function (match, p1) { return p1; });
                          }
                      } else {
                          // Handle raw bytes without spaces (like "ea+z" for 101.97.43.122)
                          if (ip.length <= 16 && ip.match(/^[\x00-\xff]+$/)) {
                              var bytes = [];
                              for (var i = 0; i < ip.length; i++) {
                                  bytes.push(ip.charCodeAt(i));
                              }
                              
                              if (bytes.length === 4) {
                                  // IPv4 from raw bytes
                                  ip = bytes.join('.');
                              } else if (bytes.length === 16) {
                                  // IPv6 from raw bytes
                                  var parts = [];
                                  for (var i = 0; i < 16; i += 2) {
                                      var hex = ((bytes[i] << 8) + bytes[i + 1]).toString(16);
                                      parts.push(hex);
                                  }
                                  ip = parts.join(':');
                                  
                                  // Apply IPv6 compression rules
                                  ip = '<' + ip + '>';
                                  for (var i = 8; i > 1; i--) {
                                      var r1 = new RegExp("[:<>](?:0[:<>]){" + i + "}");
                                      var m = ip.match(r1);
                                      if (m) {
                                          ip = ip.replace(r1, '::');
                                          break;
                                      }
                                  }
                                  ip = ip.replace(/^[<]?([^>]+)[>]?$/, function (match, p1) { return p1; });
                              }
                          }
                      }
                  
                      array[index]["{#BGPPEERREMOTEADDRESS}"] = ip;
                  });
                  
                  return JSON.stringify(json);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
      valuemaps:
        - uuid: f4b169a948eb4f208e4a028fa6d1e66b
          name: BgpPeerAdminStatus
          mappings:
            - value: '1'
              newvalue: stop
            - value: '2'
              newvalue: start
        - uuid: 8e7ad782f7e04d88bc2b1b26a47e8dd3
          name: BgpPeerState
          mappings:
            - value: '1'
              newvalue: idle
            - value: '2'
              newvalue: connect
            - value: '3'
              newvalue: active
            - value: '4'
              newvalue: opensent
            - value: '5'
              newvalue: openconfirm
            - value: '6'
              newvalue: established
