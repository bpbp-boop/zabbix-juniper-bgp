zabbix_export:
  version: '5.2'
  date: '2021-04-28T00:42:50Z'
  groups:
    -
      name: 'Templates/Network devices'
  templates:
    -
      template: 'Juniper BGP'
      name: 'Juniper BGP'
      groups:
        -
          name: 'Templates/Network devices'
      applications:
        -
          name: BGP
      discovery_rules:
        -
          name: 'BGP peer discovery'
          type: SNMP_AGENT
          snmp_oid: 'discovery[{#BGPPEERINDEX},.1.3.6.1.4.1.2636.5.1.1.2.1.1.1.14,{#BGPPEERREMOTEADDRESS},1.3.6.1.4.1.2636.5.1.1.2.1.1.1.11, {#BGPEERREMOTEAS},.1.3.6.1.4.1.2636.5.1.1.2.1.1.1.13]'
          key: net.bgp.peer.discovery
          delay: 10m
          item_prototypes:
            -
              name: 'Last received error AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.2.1.1.5.{#SNMPINDEX}'
              key: 'net.bgp.peer.error.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 5m
              trends: '0'
              value_type: TEXT
              applications:
                -
                  name: BGP
            -
              name: 'Last sent error AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.2.1.1.6.{#SNMPINDEX}'
              key: 'net.bgp.peer.error.sent[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 5m
              trends: '0'
              value_type: TEXT
              applications:
                -
                  name: BGP
            -
              name: 'IPv4 prefixes accepted AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.8.{#BGPPEERINDEX}.1.1'
              key: 'net.bgp.peer.prefixes.ipv4.accepted[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv4 prefixes active AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.11.{#BGPPEERINDEX}.1.1'
              key: 'net.bgp.peer.prefixes.ipv4.active[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv4 prefixes advertised AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.6.2.1.10.{#BGPPEERINDEX}.1.1'
              key: 'net.bgp.peer.prefixes.ipv4.advertised[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv4 prefixes received AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.7.{#BGPPEERINDEX}.1.1'
              key: 'net.bgp.peer.prefixes.ipv4.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv4 prefixes rejected AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.9.{#BGPPEERINDEX}.1.1'
              key: 'net.bgp.peer.prefixes.ipv4.rejected[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv6 prefixes accepted AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.8.{#BGPPEERINDEX}.2.1'
              key: 'net.bgp.peer.prefixes.ipv6.accepted[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv6 prefixes active AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.11.{#BGPPEERINDEX}.2.1'
              key: 'net.bgp.peer.prefixes.ipv6.active[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv6 prefixes advertised AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.6.2.1.10.{#BGPPEERINDEX}.2.1'
              key: 'net.bgp.peer.prefixes.ipv6.advertised[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv6 prefixes received AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.7.{#BGPPEERINDEX}.2.1'
              key: 'net.bgp.peer.prefixes.ipv6.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'IPv6 prefixes rejected AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '1.3.6.1.4.1.2636.5.1.1.2.6.2.1.9.{#BGPPEERINDEX}.2.1'
              key: 'net.bgp.peer.prefixes.ipv6.rejected[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 2m
              applications:
                -
                  name: BGP
            -
              name: 'Peer state AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.1.1.1.2.{#SNMPINDEX}'
              key: 'net.bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              applications:
                -
                  name: BGP
              valuemap:
                name: BgpPeerState
            -
              name: 'Administrative status AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.1.1.1.3.{#SNMPINDEX}'
              key: 'net.bgp.peer.status[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 5m
              applications:
                -
                  name: BGP
              valuemap:
                name: BgpPeerAdminStatus
            -
              name: 'Established time AS{#BGPEERREMOTEAS} ({#BGPPEERREMOTEADDRESS})'
              type: SNMP_AGENT
              snmp_oid: '.1.3.6.1.4.1.2636.5.1.1.2.4.1.1.1.{#SNMPINDEX}'
              key: 'net.bgp.peer.uptime[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}]'
              delay: 5m
              units: s
              applications:
                -
                  name: BGP
          trigger_prototypes:
            -
              expression: '{Juniper BGP:net.bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last()}=6 and {Juniper BGP:net.bgp.peer.prefixes.ipv4.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last()}<0.8*{Juniper BGP:net.bgp.peer.prefixes.ipv4.received[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].avg(1d)}'
              name: '{HOST.HOST} BGP peer {#BGPPEERREMOTEADDRESS} (AS{#BGPEERREMOTEAS}) has lost more than 20% of received prefixes'
              priority: WARNING
              dependencies:
                -
                  name: '{HOST.HOST} BGP peer {#BGPPEERREMOTEADDRESS} (AS{#BGPEERREMOTEAS}) is DOWN'
                  expression: '{Juniper BGP:net.bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last(#3)}<>6 and {Juniper BGP:net.bgp.peer.status[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last()}=2'
            -
              expression: '{Juniper BGP:net.bgp.peer.state[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last(#3)}<>6 and {Juniper BGP:net.bgp.peer.status[{#BGPEERREMOTEAS}, {#BGPPEERREMOTEADDRESS}].last()}=2'
              name: '{HOST.HOST} BGP peer {#BGPPEERREMOTEADDRESS} (AS{#BGPEERREMOTEAS}) is DOWN'
              priority: HIGH
          preprocessing:
            -
              type: JAVASCRIPT
              parameters:
                - |
                  json = JSON.parse(value);
                  
                  json.forEach(function (item, index, array) {
                      var ip = item["{#BGPPEERREMOTEADDRESS}"];
                  
                      // Handle raw bytes returned as ASCII characters (like "ea+z" for 101.97.43.122)
                      if (ip.match(/^[\x00-\xff]+$/) && ip.length <= 16 && !ip.match(/^\d+\.\d+\.\d+\.\d+$/)) {
                          // Convert raw bytes to proper IP format
                          var bytes = [];
                          for (var i = 0; i < ip.length; i++) {
                              bytes.push(ip.charCodeAt(i));
                          }
                          
                          if (bytes.length === 4) {
                              // IPv4
                              ip = bytes.join('.');
                          } else if (bytes.length === 16) {
                              // IPv6
                              var parts = [];
                              for (var i = 0; i < 16; i += 2) {
                                  var hex = ((bytes[i] << 8) + bytes[i + 1]).toString(16);
                                  parts.push(hex);
                              }
                              ip = parts.join(':');
                              
                              // Apply IPv6 compression rules
                              ip = '<' + ip + '>';
                              for (var i = 8; i > 1; i--) {
                                  var r1 = new RegExp("[:<>](?:0[:<>]){" + i + "}");
                                  var m = ip.match(r1);
                                  if (m) {
                                      ip = ip.replace(r1, '::');
                                      break;
                                  }
                              }
                              ip = ip.replace(/^[<]?([^>]+)[>]?$/, function (match, p1) { return p1; });
                          }
                      } else {
                          // Handle space-separated hex format (original logic)
                          var parts = ip.trim().split(' ');
                  
                          if (parts.length === 4) {
                              for (var i = 0; i < parts.length; ++i) {
                                  parts[i] = parseInt(parts[i], 16);
                              }
                              ip = parts.join('.');
                          } else if (parts.length == 16) {
                              // IPv6 from space-separated hex
                              ip = parts
                                  .join('')
                                  .match(/.{1,4}/g)
                                  .map(function(word) {
                                    word = word.replace(/^0+/, '');
                                    if (word.length === 0) {
                                      word = "0";
                                    }
                                    return word;
                                  })
                                  .join(':')
                                  .toLowerCase();
                      
                              ip = '<' + ip + '>';
                              for (var i = 8; i > 1; i--) {
                                  var r1 = new RegExp("[:<>](?:0[:<>]){" + i + "}");
                                  if (m = ip.match(r1)) {
                                      ip = ip.replace(r1, '::');
                                      break;
                                  }
                              }
                              ip = ip.replace(/^[<]?([^>]+)[>]?$/, function (match, p1) { return p1; });
                          }
                      }
                  
                      array[index]["{#BGPPEERREMOTEADDRESS}"] = ip;
                  });
                  
                  return JSON.stringify(json);
  value_maps:
    -
      name: BgpPeerAdminStatus
      mappings:
        -
          value: '1'
          newvalue: stop
        -
          value: '2'
          newvalue: start
    -
      name: BgpPeerState
      mappings:
        -
          value: '1'
          newvalue: idle
        -
          value: '2'
          newvalue: connect
        -
          value: '3'
          newvalue: active
        -
          value: '4'
          newvalue: opensent
        -
          value: '5'
          newvalue: openconfirm
        -
          value: '6'
          newvalue: established
